/*

1720번 - 타일 코드
https://www.acmicpc.net/problem/1720
분류 : 수학, 다이나믹 프로그래밍, 조합론

모든 타일은 자체적으로 좌우 대칭이거나(1번), 자체적으로 좌우 대칭이 아닌 경우(2번) 2가지가 있다.
자체적으로 대칭인 경우는 일반적인 타일풀이에서 중복되지 않으므로 좌우 대칭이 아닌 경우만 개수를 확인하면 된다.
2번의 경우는 항상 좌우 대칭인 타일 배치가 있으므로 절반만 더하면 총 개수가 된다.
총 개수 = 1번 + 2번 / 2
여기서 1번+2번=dp[n]이므로,
1번 + 2번 / 2 = (1번 * 2 + 2번) / 2 = (dp[n] + 1번) / 2
따라서 dp[n]과 1번의 경우만 구하면 된다.

n이 홀수일 때는 중앙에 1x2 타일이 배치되고 한 쪽에 나올 수 있는 타일 배치 수만큼 1번이 되기 때문에 dp[(n-1)/2]가 된다.
n이 짝수일 때는 중앙을 기준으로 나뉘거나, 중앙에 2x1, 2x2 타일이 있는 경우 2개가 있다.
중앙을 기준으로 나뉠 때는 dp[n/2]만큼 경우의 수가 존재하고 2x? 타일이 있을 때는 dp[n/2-1]만큼 경우의 수가 존재한다.

https://stillchobo.tistory.com/106

*/

package _20230601

fun main() {
    val n = readln().toInt()
    val dp = IntArray(n + 1) { 1 }
    for (i in 2..n) {
        dp[i] = dp[i - 2] * 2 + dp[i - 1]
    }
    val answer = ((if (n % 2 == 1) 0 else dp[n / 2 - 1] * 2) + dp[n / 2] + dp[n]) / 2
    print(answer)
}

/*
a + b/2 = 2a / 2 + b/2 = (2a + b)/2
*/
